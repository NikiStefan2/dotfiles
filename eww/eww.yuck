(defpoll time :interval "1m"
  "date '+%I:%M %p'")

(defpoll date :interval "24h"
  "date '+%b %d %a'")

(defpoll volume :interval "500ms"
  "pulsemixer --get-volume | awk '{print $1}'")

(defpoll workspaces :interval "1s"
  "hyprctl workspaces -j | jq 'sort_by(.id)' | jq '.[] | select(.id > 0) | .id' | jq -s")

(defpoll active-window :interval "200ms"
  "hyprctl activewindow -j | jq '.title' -r")

(defwindow bar
  :monitor 1
  :geometry (geometry :x "0%"
    :y "5px"
    :width "100%"
    :height "50px"
  :anchor "top center")
  :stacking "fg"
  :exclusive "true"
  (box :orientation "horizontal" :space-evenly true :width "500px"
    (box :orientation "horizontal" :halign "start" :space-evenly false
      (workspaces)
      (label :text active-window :class "widget"))
    (box :orientation "horizontal" :halign "end" :space-evenly false
      (volume-scale)
      (monitor)
      (clock))))

(defwidget clock []
  (box :orientation "horizontal"
    :class "widget clock"
    (label :text {date + " "} :class "date")
    (label :text time :class "highlight clock")))

(defwidget monitor []
  (box :orientation "horizontal"
    :class "widget monitor"
    :spacing 5
    :space-evenly false
    (monitor-display :name "TEMP" :value "${EWW_TEMPS.AMDGPU_EDGE}Â°")
    (monitor-display :name "CPU" :value "${round(EWW_CPU.avg, 0)}%")
    (monitor-display :name "RAM" :value "${round(EWW_RAM.used_mem / EWW_RAM.total_mem * 100, 0)}%")
    (monitor-display :name "BATT" :value "${EWW_BATTERY.BAT1.capacity}%" :hide {EWW_BATTERY.BAT1.capacity == 100})))

(defwidget monitor-display [name value ?hide]
  (box :orientation "horizontal" :space-evenly false :visible {!hide}
   (label :text {name + " "})
   (label :text value :class "highlight")))

(defwidget volume-scale []
  (box :orientation "horizontal" :space-evenly false :class "widget"
    (scale :value volume :width 100)))

(defwidget workspaces []
  (box :orientation "horizontal" :space-evenly false :class "widget workspaces"
    (for entry in workspaces
      (button entry))))